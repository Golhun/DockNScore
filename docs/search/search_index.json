{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DockNScore Pipeline Documentation \ud83e\uddec","text":"<p>Welcome to the DockNScore Pipeline documentation! This pipeline is your go-to tool for cheminformatics and molecular modeling tasks, with a primary focus on molecular docking and scoring. Dive into the world of computational chemistry and discover how DockNScore can streamline your drug discovery, virtual screening, and molecular interaction studies.</p>"},{"location":"#overview","title":"Overview \ud83d\ude80","text":"<p>DockNScore harnesses the power of various Python libraries and external tools to conduct docking simulations and analyze the results effectively. Whether you're a seasoned researcher or a curious enthusiast, DockNScore provides a user-friendly interface for exploring molecular interactions and potential drug candidates.</p>"},{"location":"#key-features","title":"Key Features \ud83d\udd11","text":"<ul> <li>Flexible Docking: Perform docking simulations with ease and flexibility, allowing for various ligand and protein configurations.</li> <li>Scoring Analysis: Analyze docking results using advanced scoring algorithms to identify promising drug candidates.</li> <li>Visualization: Visualize molecular interactions and binding poses to gain insights into ligand-protein interactions.</li> <li>Automation: Automate repetitive tasks and streamline workflows for efficient virtual screening and drug discovery.</li> </ul>"},{"location":"#navigation","title":"Navigation \ud83d\udcda","text":"<ul> <li>Installation Guide: Get started with DockNScore by setting up the pipeline and its dependencies.</li> <li>Dependencies: Check out the list of Python libraries and external tools required for running DockNScore.</li> <li>Usage Guide: Learn how to use DockNScore efficiently with step-by-step instructions and handy examples.</li> </ul> <p>Feel free to navigate through the documentation to unlock the full potential of DockNScore! \ud83e\uddea\ud83d\udd0d\u2728</p>"},{"location":"dependencies/","title":"Dependencies \ud83d\udce6","text":"<p>DockNScore relies on the following Python libraries and external tools to function properly:</p>"},{"location":"dependencies/#python-libraries","title":"Python Libraries","text":"<ul> <li> <p>pandas: A powerful data manipulation and analysis library. Pandas provides easy-to-use data structures and data analysis tools, making it an essential tool for working with molecular data. You can learn more about pandas on the official pandas website.</p> </li> <li> <p>tqdm: A library for adding progress bars to iterables. tqdm enhances the user experience by providing visual feedback on the progress of long-running tasks. To learn more about tqdm and its features, visit the tqdm GitHub repository.</p> </li> <li> <p>colorama: Provides cross-platform support for colored terminal text output. Colorama allows DockNScore to produce visually appealing output in the terminal, improving readability and user experience. Explore more about colorama on the official colorama website.</p> </li> <li> <p>rdkit: A collection of cheminformatics and machine learning tools for handling molecular data. RDKit is widely used in the cheminformatics community for tasks such as molecular structure representation, substructure searching, and molecular property prediction. Dive deeper into RDKit by visiting the RDKit GitHub repository.</p> </li> <li> <p>rdkit.Chem: A submodule of RDKit providing additional chemistry-related functionality. rdkit.Chem extends the capabilities of RDKit with additional methods and classes specifically designed for chemical data processing and analysis. Learn more about rdkit.Chem in the official RDKit documentation.</p> </li> <li> <p>glob: A module for file path expansion using wildcard patterns. glob facilitates file manipulation and retrieval, allowing DockNScore to work with multiple files efficiently. You can find more information about glob in the Python Standard Library documentation.</p> </li> </ul>"},{"location":"dependencies/#external-tools","title":"External Tools","text":"<ul> <li> <p>Open Babel: A chemical toolbox designed to speak the many languages of chemical data. Open Babel is used in DockNScore for file format conversion and manipulation, enabling seamless integration with various molecular file formats. Explore the capabilities of Open Babel on the official Open Babel website.</p> </li> <li> <p>AutoDock Vina: A molecular docking program for drug discovery. AutoDock Vina is utilized by DockNScore for conducting docking simulations, allowing users to predict the binding modes and affinities of small molecules with target proteins. Learn more about AutoDock Vina and its features on the AutoDock Vina website.</p> </li> </ul> <p>Ensure that all dependencies are properly installed before using DockNScore for your cheminformatics and molecular modeling tasks. For more in-depth information about each dependency, we encourage you to visit the respective websites provided above.</p>"},{"location":"installation/","title":"Installation Guide \ud83d\udee0\ufe0f","text":"<p>To get started with DockNScore, follow these steps to set up the pipeline and its dependencies.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing DockNScore, ensure you have the following prerequisites:</p> <ul> <li>Python 3.x: If not already installed, you can download it from the official Python website.</li> <li>Conda (Optional): If you prefer managing packages with Conda, you can install it by following the instructions on the Conda documentation.</li> </ul>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Install Python Libraries:</p> </li> <li> <p>Option 1: Install with Conda (Recommended):</p> <p><code>bash  conda create -n docknscore_env python=3.x  conda activate docknscore_env  conda install pandas tqdm colorama rdkit</code></p> </li> <li> <p>Option 2: Install with pip:      <code>bash      pip install pandas tqdm colorama rdkit</code></p> </li> </ol> <p>Installing with Conda is recommended as it provides better package management and avoids potential conflicts with other Python packages. Alternatively, you can install each library separately with pip.</p> <p>If you choose to install with pip, you can also install each library separately with the following commands:</p> <p><code>bash    pip install pandas    pip install tqdm    pip install colorama    pip install rdkit</code></p> <ol> <li> <p>Install External Tools:</p> </li> <li> <p>Open Babel: Follow the installation instructions provided on the Open Babel website.</p> </li> <li> <p>AutoDock Vina: Refer to the AutoDock Vina download page for installation instructions.</p> </li> <li> <p>Clone the Repository:</p> </li> </ol> <p><code>bash    git clone https://github.com/yourusername/DockNScore.git</code></p> <p>Now you're all set to start using DockNScore for your cheminformatics and molecular modeling tasks!</p>"},{"location":"usage/","title":"Usage Guide \ud83d\ude80","text":"<p>Before running the DockNScore pipeline, it's essential to prepare your protein for docking and dock it to a ligand using PyRx. Follow these steps to ensure a smooth docking process:</p>"},{"location":"usage/#protein-preparation-with-pyrx","title":"Protein Preparation with PyRx","text":"<ol> <li> <p>Prepare Protein Structure: Use PyRx to prepare your protein structure for docking. PyRx offers various tools for protein preparation, including adding hydrogen atoms, optimizing the structure, and assigning charges.</p> </li> <li> <p>Dock Protein to Ligand: Dock your prepared protein to a ligand of interest using PyRx. This step involves selecting suitable docking parameters, running the docking simulation, and analyzing the results to identify potential binding modes.</p> </li> <li> <p>Obtain Configuration File: After docking, PyRx generates a configuration file (conf.txt) containing the docking parameters and results. You'll need this file for running DockNScore.</p> </li> <li> <p>Prepare Excel File: Ensure that your Excel file containing compound information has a column named 'MMV ID' for compound IDs and another column named 'SMILES' for compound SMILES strings. These column names must be strictly followed. Edit your Excel file to ensure compliance.</p> </li> <li> <p>Place Files in Directory: Place the conf.txt file generated by PyRx and your prepared protein structure (in mol2 or PDB format) in the same directory as the DockNScore executable. Additionally, place your Excel file with compound information in the same directory.</p> </li> <li> <p>Organize Protein Files: Move your prepared protein structure file to the <code>Docking_Proteins</code> folder located in the directory with the DockNScore executable. This folder is where DockNScore expects protein files to be located.</p> </li> </ol>"},{"location":"usage/#running-docknscore","title":"Running DockNScore","text":"<p>Once you've prepared your protein and ligand data and organized the files as instructed, you can run DockNScore using the provided executable. Here's how to do it:</p> <pre><code>./DockNScore.exe --protein_folder Docking_Proteins --config_file conf.txt --xlsx_file output_results.xlsx\n</code></pre> <p>Ensure that you replace conf.txt with the actual name of your PyRx configuration file and output_results.xlsx with the desired name for the output Excel file containing docking results.</p>"},{"location":"usage/#organizing-results","title":"Organizing Results","text":"<p>After running DockNScore, the pipeline generates folders containing the docking results for each compound. It is recommended to copy all these result folders into a single directory for better organization. For example, if you are docking one protein against multiple plates of compounds, save the results for each plate separately and run the pipeline for each plate separately.</p> <p>This organization strategy helps keep your results structured and easily accessible for further analysis or reference.</p> <p>Follow these steps carefully to maximize the accuracy and efficiency of your docking experiments using DockNScore. Happy docking! \ud83e\uddec\ud83d\udd2c</p>"}]}